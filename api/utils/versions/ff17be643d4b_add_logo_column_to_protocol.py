"""add_logo_column_to_protocol

Revision ID: ff17be643d4b
Revises: 98582cbf0ba4
Create Date: 2024-11-16 07:11:50.567971

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ff17be643d4b'
down_revision: Union[str, None] = '98582cbf0ba4'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('oauth')
    op.drop_table('flask_dance_oauth')
    op.drop_table('ApiKeys')
    op.add_column('Users', sa.Column('full_name', sa.String(), nullable=True))
    op.add_column('Users', sa.Column('disabled', sa.Boolean(), nullable=True))
    op.alter_column('Users', 'username',
               existing_type=sa.VARCHAR(length=64),
               nullable=False)
    op.drop_constraint('Users_email_key', 'Users', type_='unique')
    op.drop_constraint('Users_username_key', 'Users', type_='unique')
    op.create_index(op.f('ix_Users_id'), 'Users', ['id'], unique=False)
    op.drop_column('Users', 'oauth_google')
    op.drop_column('Users', 'oauth_github')
    op.drop_column('Users', 'password')
    op.drop_column('Users', 'first_name')
    op.drop_column('Users', 'last_name')
    op.drop_column('Users', 'picture')
    op.add_column('protocols', sa.Column('logo', sa.LargeBinary(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('protocols', 'logo')
    op.add_column('Users', sa.Column('picture', sa.VARCHAR(length=1024), autoincrement=False, nullable=True))
    op.add_column('Users', sa.Column('last_name', sa.VARCHAR(length=64), autoincrement=False, nullable=True))
    op.add_column('Users', sa.Column('first_name', sa.VARCHAR(length=64), autoincrement=False, nullable=True))
    op.add_column('Users', sa.Column('password', postgresql.BYTEA(), autoincrement=False, nullable=True))
    op.add_column('Users', sa.Column('oauth_github', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('Users', sa.Column('oauth_google', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_Users_id'), table_name='Users')
    op.create_unique_constraint('Users_username_key', 'Users', ['username'])
    op.create_unique_constraint('Users_email_key', 'Users', ['email'])
    op.alter_column('Users', 'username',
               existing_type=sa.VARCHAR(length=64),
               nullable=True)
    op.drop_column('Users', 'disabled')
    op.drop_column('Users', 'full_name')
    op.create_table('ApiKeys',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"ApiKeys_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('key', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_used_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['Users.id'], name='ApiKeys_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='ApiKeys_pkey'),
    sa.UniqueConstraint('key', name='ApiKeys_key_key')
    )
    op.create_table('flask_dance_oauth',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('provider', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('token', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['Users.id'], name='flask_dance_oauth_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='flask_dance_oauth_pkey')
    )
    op.create_table('oauth',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('provider', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('token', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('provider_user_id', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['Users.id'], name='oauth_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='oauth_pkey')
    )
    # ### end Alembic commands ###
